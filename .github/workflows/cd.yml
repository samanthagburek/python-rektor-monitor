name: Continuous Deployment
on: 
    push:
        tags:
            - '*'
jobs:
  cd:
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        attestations: write
        contents: write
        discussions: write
    steps:
      - name: Check out code
        uses: actions/checkout@v2
    #----------------------------------------------
    #  -----  install python  -----
    #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          virtualenvs-path: .venv
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      - name: Build project
        run: |
            echo "Tag name from github.ref_name: ${{  github.ref_name }}"
            poetry version ${{  github.ref_name }}
            poetry build

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
            format: 'cyclonedx-json'
            output-file: 'sbom.cyclonedx.json'
      - name: Attest
        uses: actions/attest-sbom@v2
        with:
            subject-path: '${{ github.workspace }}/python_rekor_monitor'
            sbom-path: 'cyclonedx-sbom.json'

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            dist/*
          tag_name: ${{ github.ref_name }}
          name: "python-rektor-monitor ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}